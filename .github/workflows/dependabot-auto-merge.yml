name: Dependabot Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          alert-lookup: true
          compat-lookup: true

      - name: Add labels to PR
        uses: actions/github-script@v7
        with:
          script: |
            const metadata = {
              updateType: '${{ steps.metadata.outputs.update-type }}',
              alertState: '${{ steps.metadata.outputs.alert-state }}',
              dependencyGroup: '${{ steps.metadata.outputs.dependency-group }}',
              packageEcosystem: '${{ steps.metadata.outputs.package-ecosystem }}'
            };

            const labels = ['dependencies'];

            // Add ecosystem-specific labels
            const depGroup = metadata.dependencyGroup || '';
            if (depGroup.includes('react') || metadata.packageEcosystem === 'npm' && depGroup.match(/react/i)) {
              labels.push('react');
            } else if (depGroup.includes('next')) {
              labels.push('next');
            } else if (depGroup.includes('tailwind')) {
              labels.push('tailwind');
            } else if (depGroup.includes('typescript')) {
              labels.push('typescript');
            } else if (metadata.packageEcosystem === 'github-actions') {
              labels.push('github-actions');
            }

            // Add update type labels
            if (metadata.alertState && metadata.alertState !== '') {
              labels.push('security');
            }
            if (metadata.updateType === 'version-update:semver-major') {
              labels.push('major');
            }

            console.log('üè∑Ô∏è Adding labels:', labels);

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            });

      - name: Determine auto-merge eligibility
        id: check-automerge
        uses: actions/github-script@v8
        with:
          script: |
            const metadata = {
              updateType: '${{ steps.metadata.outputs.update-type }}',
              alertState: '${{ steps.metadata.outputs.alert-state }}',
              compatScore: '${{ steps.metadata.outputs.compatibility-score }}',
              dependencyGroup: '${{ steps.metadata.outputs.dependency-group }}',
              dependencyNames: '${{ steps.metadata.outputs.dependency-names }}',
              previousVersion: '${{ steps.metadata.outputs.previous-version }}',
              newVersion: '${{ steps.metadata.outputs.new-version }}',
              packageEcosystem: '${{ steps.metadata.outputs.package-ecosystem }}'
            };

            console.log('üìä Metadata:', JSON.stringify(metadata, null, 2));

            // Security updates: auto-merge immediately (any version)
            if (metadata.alertState && metadata.alertState !== '') {
              console.log('‚úÖ Security update detected - eligible for auto-merge');
              core.setOutput('should-merge', 'true');
              core.setOutput('merge-reason', 'security');

              // Add automerge label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['automerge']
              });

              return true;
            }

            // Major updates: require manual review (non-security)
            if (metadata.updateType === 'version-update:semver-major') {
              console.log('‚ùå Major update detected (non-security) - skipping auto-merge');
              core.setOutput('should-merge', 'false');
              core.setOutput('merge-reason', 'major-version');
              return false;
            }

            // Minor/patch updates: check compatibility score
            if (metadata.updateType === 'version-update:semver-minor' ||
                metadata.updateType === 'version-update:semver-patch') {

              // Check compatibility score if available
              if (metadata.compatScore && metadata.compatScore !== '') {
                const score = parseInt(metadata.compatScore, 10);
                if (score < 80) {
                  console.log(`‚ö†Ô∏è Low compatibility score (${score}%) - skipping auto-merge`);
                  core.setOutput('should-merge', 'false');
                  core.setOutput('merge-reason', 'low-compatibility');
                  return false;
                }
                console.log(`‚úÖ Minor/patch update with good compatibility (${score}%) - eligible for auto-merge`);
              } else {
                console.log('‚úÖ Minor/patch update - eligible for auto-merge');
              }

              // Add automerge label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: ['automerge']
              });

              core.setOutput('should-merge', 'true');
              core.setOutput('merge-reason', 'minor-patch');
              return true;
            }

            // Unknown update type
            console.log('‚ùå Unknown update type - skipping auto-merge');
            core.setOutput('should-merge', 'false');
            core.setOutput('merge-reason', 'unknown');
            return false;

      - name: Wait for CI checks
        if: steps.check-automerge.outputs.should-merge == 'true'
        id: wait-for-checks
        continue-on-error: true
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          running-workflow-name: 'auto-merge'
          allowed-conclusions: success,skipped

      - name: Handle CI check failures
        if: steps.check-automerge.outputs.should-merge == 'true' && steps.wait-for-checks.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            // Add review label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['review']
            });

            // Request review from davie3
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: ['davie3']
            });

            // Post failure comment
            const comment = [
              '‚ö†Ô∏è CI checks have failed for this Dependabot PR.',
              '',
              '**This PR was eligible for auto-merge but CI checks did not pass.**',
              '',
              '@davie3 please review the failures. If you approve this PR after fixing/reviewing, it will be automatically merged.'
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

            // Exit with error to prevent auto-merge from continuing
            core.setFailed('CI checks failed - auto-merge blocked');

      - name: Auto-approve PR
        if: steps.check-automerge.outputs.should-merge == 'true' && steps.wait-for-checks.outcome == 'success'
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge with squash
        if: steps.check-automerge.outputs.should-merge == 'true' && steps.wait-for-checks.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            try {
              // Enable auto-merge with squash method
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                event: 'APPROVE',
                body: '‚úÖ Auto-approving safe dependency update'
              });

              // Post comment to trigger Dependabot merge
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '@dependabot squash and merge'
              });

              console.log('‚úÖ Posted squash and merge command');
            } catch (error) {
              console.error('‚ùå Error:', error);
              throw error;
            }

      - name: Add detailed status comment
        if: steps.check-automerge.outputs.should-merge == 'true' && steps.wait-for-checks.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const metadata = {
              updateType: '${{ steps.metadata.outputs.update-type }}',
              alertState: '${{ steps.metadata.outputs.alert-state }}',
              ghsaId: '${{ steps.metadata.outputs.ghsa-id }}',
              cvss: '${{ steps.metadata.outputs.cvss }}',
              compatScore: '${{ steps.metadata.outputs.compatibility-score }}',
              dependencyGroup: '${{ steps.metadata.outputs.dependency-group }}',
              dependencyNames: '${{ steps.metadata.outputs.dependency-names }}',
              previousVersion: '${{ steps.metadata.outputs.previous-version }}',
              newVersion: '${{ steps.metadata.outputs.new-version }}'
            };

            const mergeReason = '${{ steps.check-automerge.outputs.merge-reason }}';

            let updateTypeLabel = 'Unknown update';
            let additionalInfo = '';

            if (mergeReason === 'security') {
              updateTypeLabel = 'üîí Security update';
              if (metadata.ghsaId) {
                additionalInfo += `\n- **Advisory:** ${metadata.ghsaId}`;
              }
              if (metadata.cvss) {
                additionalInfo += `\n- **CVSS Score:** ${metadata.cvss}`;
              }
            } else if (metadata.updateType === 'version-update:semver-patch') {
              updateTypeLabel = 'üîß Patch update';
            } else if (metadata.updateType === 'version-update:semver-minor') {
              updateTypeLabel = '‚ú® Minor update';
            }

            if (metadata.compatScore && metadata.compatScore !== '') {
              additionalInfo += `\n- **Compatibility Score:** ${metadata.compatScore}%`;
            }

            if (metadata.dependencyGroup && metadata.dependencyGroup !== '') {
              additionalInfo += `\n- **Dependency Group:** \`${metadata.dependencyGroup}\``;
            }

            const versionInfo = metadata.previousVersion && metadata.newVersion
              ? `\n- **Version:** ${metadata.previousVersion} ‚Üí ${metadata.newVersion}`
              : '';

            const comment = [
              'ü§ñ This PR has been auto-approved and will be merged automatically once all checks pass.',
              '',
              '**Auto-merge criteria met:**',
              `- ‚úÖ ${updateTypeLabel}`,
              '- ‚úÖ Passed eligibility checks',
              `- ‚úÖ All CI checks passing${versionInfo}${additionalInfo}`,
              '',
              '**Note:** Major updates (except security) require manual review.'
            ].join('\n');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

      - name: Add manual review comment and request review
        if: steps.check-automerge.outputs.should-merge == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const metadata = {
              updateType: '${{ steps.metadata.outputs.update-type }}',
              dependencyNames: '${{ steps.metadata.outputs.dependency-names }}',
              previousVersion: '${{ steps.metadata.outputs.previous-version }}',
              newVersion: '${{ steps.metadata.outputs.new-version }}',
              compatScore: '${{ steps.metadata.outputs.compatibility-score }}'
            };

            const mergeReason = '${{ steps.check-automerge.outputs.merge-reason }}';

            let reason = '';
            if (mergeReason === 'major-version') {
              reason = 'This is a **major version update** that may contain breaking changes.';
            } else if (mergeReason === 'low-compatibility') {
              reason = `This update has a **low compatibility score** (${metadata.compatScore}%).`;
            } else {
              reason = 'This update requires manual review.';
            }

            const versionInfo = metadata.previousVersion && metadata.newVersion
              ? `\n- **Version:** ${metadata.previousVersion} ‚Üí ${metadata.newVersion}`
              : '';

            const comment = [
              'üëÄ This PR requires manual review before merging.',
              '',
              `**Reason:** ${reason}${versionInfo}`,
              '',
              '@davie3 please review this update. If approved, the PR will be automatically merged.'
            ].join('\n');

            // Add review label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['review']
            });

            // Request review from davie3
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: ['davie3']
            });

            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
